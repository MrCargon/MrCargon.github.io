{
  "version": "1.0.0",
  "checksum": "a7b3c9d2e1f4g5h6",
  "lastModified": "2025-01-06T00:00:00Z",
  "immutable": true,
  "rules": {
    "rule1": {
      "id": "SIMPLE_CONTROL_FLOW",
      "description": "Restrict all code to very simple control flow constructs",
      "restrictions": [
        "No goto statements",
        "No setjmp or longjmp constructs",
        "No direct or indirect recursion"
      ],
      "maxNestingDepth": 4
    },
    "rule2": {
      "id": "BOUNDED_LOOPS",
      "description": "All loops must have a fixed upper-bound",
      "maxIterations": 1000,
      "requiresStaticProof": true
    },
    "rule3": {
      "id": "NO_DYNAMIC_MEMORY",
      "description": "No dynamic memory allocation after initialization",
      "allowedPhase": "initialization",
      "maxHeapSize": "10MB"
    },
    "rule4": {
      "id": "FUNCTION_LENGTH",
      "description": "No function longer than 60 lines",
      "maxLines": 60,
      "maxStatements": 50,
      "maxDeclarations": 10
    },
    "rule5": {
      "id": "ASSERTION_DENSITY",
      "description": "Minimum two assertions per function",
      "minAssertions": 2,
      "requiresSideEffectFree": true
    },
    "rule6": {
      "id": "RECOVERY_TIME",
      "description": "Don't have hard stops, allow recovery time",
      "maxRecoveryTime": 5000,
      "requiresErrorHandler": true
    },
    "rule7": {
      "id": "CHECK_RETURNS",
      "description": "Check all function return values and parameters",
      "requiresReturnCheck": true,
      "requiresParameterValidation": true
    },
    "rule8": {
      "id": "LIMITED_PREPROCESSOR",
      "description": "Limited preprocessor use",
      "allowedUses": ["headers", "simple_macros"],
      "maxConditionalCompilation": 2
    },
    "rule9": {
      "id": "POINTER_RESTRICTION",
      "description": "Restrict pointer usage",
      "maxDereferenceLevel": 1,
      "functionPointersAllowed": false
    },
    "rule10": {
      "id": "COMPILER_WARNINGS",
      "description": "All warnings enabled, zero warnings allowed",
      "warningLevel": "pedantic",
      "treatWarningsAsErrors": true
    }
  },
  "enforcement": {
    "mode": "strict",
    "autoFix": false,
    "blockOnViolation": true,
    "reportingLevel": "verbose"
  }
}
